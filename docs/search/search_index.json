{
    "docs": [
        {
            "location": "/",
            "text": "Overview\n\u00b6\n\n\nDesign Philosophy\n\u00b6",
            "title": "Introduction"
        },
        {
            "location": "/#overview",
            "text": "",
            "title": "Overview"
        },
        {
            "location": "/#design-philosophy",
            "text": "",
            "title": "Design Philosophy"
        },
        {
            "location": "/installation/",
            "text": "Installation\n\u00b6\n\n\nPyneal is built and tested using \nPython 3.6\n. Download from \nhttps://www.python.org/downloads/\n or via a distribution like \nAnaconda\n\n\nPyneal requires additional libraries beyond the standard library. Instructions below use \npip\n to install these libraries. Verify that you have \npip\n installed:\n\n\n\n\nwhich pip\n\n\n\n\nIf not, download and install pip from \nhttps://pip.pypa.io/en/stable/installing/\n\n\nThe software tool is broken into two separate components: \nPyneal Scanner\n and \nPyneal\n. When first downloaded, \nPyneal Scanner\n is contained in a separate directory within the \nPyneal\n directory\n\n\n\n\n\n\nPyneal Scanner\n: Accesses incoming data, modifies it to match a standardized format, and then sends the data out, one 3D volume at a time, to \nPyneal\n\n\n\n\n\n\nPyneal\n: Listens for incoming 3D volumes from \nPyneal Scanner\n, runs whatever analyses\nyou have specified, and hosts the results on a server, which other downstream components (e.g. an experimental task) can make requests to\n\n\n\n\n\n\nThis design allows the software to easily accommodate the various directory structures and  data formats that are found on different scanner models at different institutions around the world.\n\n\nHowever, this feature also means that the specific installation instructions can vary by computing environments.\n\n\nDefinitions Used\n\u00b6\n\n\nFor the purposes of these instructions, we'll refer to computers by their \nfunctional\n role:\n\n\n\n\n\n\nScanner computer\n: The computer where reconstructed images from the scanner appear. In the case of GE scanners, for instance, new slice dicom files appear in a directory on the scanner console. Siemens scanners, on the other hand, may export new images to a directory on a shared network drive. The \nscanner computer\n is simply the computer that has local access to the directory where new images appear\n\n\n\n\n\n\nAnalysis computer\n: The computer that will be running \nPyneal\n. This is the computer on which users will setup their analysis, launch \nPyneal\n, and monitor on-going scans.\n\n\n\n\n\n\nNote that in some cases, the \nsame physical computer\n can play both functional roles. For instance, when working in a Siemens environment, new images from the scanner might be exported to a shared directory that is accessible on the \nanalysis computer\n. In this case, the same machine could be playing the role of both the \nscanner computer\n and the \nanalysis computer\n.\n\n\nDownload Pyneal\n\u00b6\n\n\nDownload the \nPyneal repository\n from GitHub, or clone to your local machine:\n\n\n\n\ngit clone https://github.com/jeffmacinnes/pyneal.git\n\n\n\n\nPyneal-Scanner\n\u00b6\n\n\nThe \npyneal_scanner\n directory needs to be on the \nscanner computer\n. If the \nscanner computer\n is different from the \nanalysis computer\n in your environment, copy the \npyneal_scanner\n directory to the \nscanner computer\n.  \n\n\ndependencies\n\u00b6\n\n\nThe \nscanner computer\n requires additional \npython\n libraries in order to run \nPyneal Scanner\n.\n\n\nYou can attempt to install all required libraries at once by navigating into the \npyneal_scanner\n directory and typing:\n\n\n\n\npip install -r requirements.txt\n\n\n\n\nIf that fails for any reason, you can install manually one at a time:\n\n\n\n\npip install numpy==1.13.1\n\npip install pydicom==0.9.9\n\npip install nibabel==2.1.0\n\npip install pyzmq==16.0.2\n\npip install pyyaml==3.12\n\n\n\n\nThese versions reflect the primary environment in which \nPyneal\n is tested. It is likely that other versions maintain compatibility, but use at your own risk.\n\n\nPyneal\n\u00b6\n\n\nThe \npyneal\n directory needs to be on the \nanalysis computer\n.\n\n\ndependencies\n\u00b6\n\n\nThe \nanalysis computer\n requires additional \npython\n libraries in order to run \nPyneal\n.\n\n\nYou can attempt to install all required libraries at once by navigating into the \npyneal\n directory and typing:\n\n\n\n\npip install -r requirements.txt\n\n\n\n\nIf that fails for any reason, you can install manually one at a time:\n\n\n\n\npip install numpy==1.13.1\n\npip install nibabel==2.1.0\n\npip install pyzmq==16.0.2\n\npip install pyyaml==3.12\n\npip install kivy==1.10.dev0\n\npip install flask==0.12.2\n\npip install flask_socketio==2.9.2\n\npip install eventlet==0.21.0  \n\n\n\n\nThese versions reflect the primary environment in which \nPyneal\n is tested. It is likely that other versions maintain compatibility, but use at your own risk.\n\n\nMisc Utilities\n\u00b6\n\n\nPyneal\n itself does not require any additional libaries beyond what is listed above. However, there are various tools included that you may find useful during a real-time scan session. For instance, the tool \ncreateMask\n can be used to transform a standard space ROI mask to the subject's functional space, which can then be used as a mask for analysis during a real-time scan. \n\n\nIn order to use these additional tools, make sure you have installed the following:\n\n\n\n\nFSL 5.0",
            "title": "Installation"
        },
        {
            "location": "/installation/#installation",
            "text": "Pyneal is built and tested using  Python 3.6 . Download from  https://www.python.org/downloads/  or via a distribution like  Anaconda  Pyneal requires additional libraries beyond the standard library. Instructions below use  pip  to install these libraries. Verify that you have  pip  installed:   which pip   If not, download and install pip from  https://pip.pypa.io/en/stable/installing/  The software tool is broken into two separate components:  Pyneal Scanner  and  Pyneal . When first downloaded,  Pyneal Scanner  is contained in a separate directory within the  Pyneal  directory    Pyneal Scanner : Accesses incoming data, modifies it to match a standardized format, and then sends the data out, one 3D volume at a time, to  Pyneal    Pyneal : Listens for incoming 3D volumes from  Pyneal Scanner , runs whatever analyses\nyou have specified, and hosts the results on a server, which other downstream components (e.g. an experimental task) can make requests to    This design allows the software to easily accommodate the various directory structures and  data formats that are found on different scanner models at different institutions around the world.  However, this feature also means that the specific installation instructions can vary by computing environments.",
            "title": "Installation"
        },
        {
            "location": "/installation/#definitions-used",
            "text": "For the purposes of these instructions, we'll refer to computers by their  functional  role:    Scanner computer : The computer where reconstructed images from the scanner appear. In the case of GE scanners, for instance, new slice dicom files appear in a directory on the scanner console. Siemens scanners, on the other hand, may export new images to a directory on a shared network drive. The  scanner computer  is simply the computer that has local access to the directory where new images appear    Analysis computer : The computer that will be running  Pyneal . This is the computer on which users will setup their analysis, launch  Pyneal , and monitor on-going scans.    Note that in some cases, the  same physical computer  can play both functional roles. For instance, when working in a Siemens environment, new images from the scanner might be exported to a shared directory that is accessible on the  analysis computer . In this case, the same machine could be playing the role of both the  scanner computer  and the  analysis computer .",
            "title": "Definitions Used"
        },
        {
            "location": "/installation/#download-pyneal",
            "text": "Download the  Pyneal repository  from GitHub, or clone to your local machine:   git clone https://github.com/jeffmacinnes/pyneal.git",
            "title": "Download Pyneal"
        },
        {
            "location": "/installation/#pyneal-scanner",
            "text": "The  pyneal_scanner  directory needs to be on the  scanner computer . If the  scanner computer  is different from the  analysis computer  in your environment, copy the  pyneal_scanner  directory to the  scanner computer .",
            "title": "Pyneal-Scanner"
        },
        {
            "location": "/installation/#dependencies",
            "text": "The  scanner computer  requires additional  python  libraries in order to run  Pyneal Scanner .  You can attempt to install all required libraries at once by navigating into the  pyneal_scanner  directory and typing:   pip install -r requirements.txt   If that fails for any reason, you can install manually one at a time:   pip install numpy==1.13.1 \npip install pydicom==0.9.9 \npip install nibabel==2.1.0 \npip install pyzmq==16.0.2 \npip install pyyaml==3.12   These versions reflect the primary environment in which  Pyneal  is tested. It is likely that other versions maintain compatibility, but use at your own risk.",
            "title": "dependencies"
        },
        {
            "location": "/installation/#pyneal",
            "text": "The  pyneal  directory needs to be on the  analysis computer .",
            "title": "Pyneal"
        },
        {
            "location": "/installation/#dependencies_1",
            "text": "The  analysis computer  requires additional  python  libraries in order to run  Pyneal .  You can attempt to install all required libraries at once by navigating into the  pyneal  directory and typing:   pip install -r requirements.txt   If that fails for any reason, you can install manually one at a time:   pip install numpy==1.13.1 \npip install nibabel==2.1.0 \npip install pyzmq==16.0.2 \npip install pyyaml==3.12 \npip install kivy==1.10.dev0 \npip install flask==0.12.2 \npip install flask_socketio==2.9.2 \npip install eventlet==0.21.0     These versions reflect the primary environment in which  Pyneal  is tested. It is likely that other versions maintain compatibility, but use at your own risk.",
            "title": "dependencies"
        },
        {
            "location": "/installation/#misc-utilities",
            "text": "Pyneal  itself does not require any additional libaries beyond what is listed above. However, there are various tools included that you may find useful during a real-time scan session. For instance, the tool  createMask  can be used to transform a standard space ROI mask to the subject's functional space, which can then be used as a mask for analysis during a real-time scan.   In order to use these additional tools, make sure you have installed the following:   FSL 5.0",
            "title": "Misc Utilities"
        },
        {
            "location": "/setup/",
            "text": "\u00b6\n\n\nThe set-up instructions are broken down by \nPyneal Scanner\n and \nPyneal\n. If you haven't already, follow the \ninstallation instructions\n to configure your environment, and read the section on \ndefinitions\n, as those definitions are used throughout these instructions. \n\n\nPyneal Scanner\n\u00b6\n\n\nCopy the \npyneal_scanner\n directory to the \nscanner computer\n. \n\n\nLaunch \nPyneal Scanner\n from the command line by navigating in to the \npyneal_scanner\n directory and running \npynealScanner.py\n\n\n\n\ncd pyneal_scanner\n\npython pynealScanner.py\n\n\n\n\nPyneal Scanner\n uses a set of configuration parameters that you can modify to fit your environment. These are stored in file named \nscannerConfig.yaml\n in the \npyneal_scanner\n directory. \n\n\nIf you're running \nPyneal Scanner\n for the first time, this file won't exist yet. You can either create this file manually, or wait until \npynealScanner.py\n prompts you to fill in any missing configuration values from the command line. Any values you enter from the command line will be saved in a new \nscannerConfig.yaml\n file. \n\n\nThe \nscannerConfig.yaml\n file allows you to customize \nPyneal Scanner\n to your scanning environment. The file contains just a few parameters stored as \nkey:value\n pairs:\n\n\nscannerBaseDir: /path/to/new/scans\nscannerMake: GE\npynealSocketHost: 127.0.0.1\npynealSocketPort: '9999'\n\n\n\n\nConfiguration Keys\n:\n\n\n\n\n\n\nscannerBaseDir\n: The \nfixed\n portion of the directory path to where new reconstructed images will be appear during a scan. That is, the part that remains constant from scan to scan. Knowing what to set this value to can differ accroding to different scanner manufacturers: \n\n\n\n\n\n\nGE\n: During a scan, new slices dicom files are written to a directory on the scanner console. The path to that directory can be broken apart like \n[scannerBaseDir]/[sessionDir]/[seriesDir]\n, where\n\n\n\n\n[scannerBaseDir]\n: path that remains constant across all scans\n\n\n[sessionDir]\n: directories that can change from session to session, named like \np###/e###\n where the specific \n#\n values are unknown in advance.\n\n\n[seriesDir]\n: series specific directory named like \ns###\n where the specific \n#\n values are unknown in advance. Each new scan during a given exam session will be assigned a unique \ns###\n dir. \n\n\n\n\nYou only need to specify the path to the \nscannerBaseDir\n in the \nscannerConfig.yaml\n file; \nPyneal Scanner\n will automaticaly find the most recently modified session and series directories and monitor for new series directories to appear. When you run \npynealScanner.py\n you will see a printout in the terminal window about the names, sizes, and modification dates of all series directories in the session directory.\n\n\n\n\n\n\nSiemens\n: TODO\n\n\n\n\n\n\nPhilips\n: Philips scanners have the option to export reconstructed PAR/REC files to a remote directory. The path to that directory can be broken apart like \n[scannerBaseDir]/[seriesDir]\n, where\n\n\n\n\n[scannerBaseDir]\n: path to remote directory that remains constant across all scans\n\n\n[seriesDir]\n: series specific directory named like \n####\n\n\n\n\n\n\n\n\nYou only need to specify the path to the \nscannerBaseDir\n in the \nscannerConfig.yaml\n file; \nPyneal Scanner\n will monitor for new series directories to appear.  \n\n\n\n\n\n\nscannerMake\n: Scanner Manufacturer, must be one of \nGE\n, \nSiemens\n, or \nPhilips\n (case sensitive)\n\n\n\n\npynealSocketHost\n: I.P. address of the \nanalysis computer\n running \nPyneal\n.\n\n\npynealSocketPort\n: The port number over which \nPyneal\n is listening for incoming data. \n\n\n\n\nPyneal\n\u00b6\n\n\nLaunch \nPyneal\n from the command line by navigating in to the \npyneal\n directory and running \npyneal.py\n\n\n\n\ncd pyneal \n\npython pyneal.py\n\n\n\n\nThe \nPyneal\n configuration is set via GUI. When you launch \npyneal.py\n a GUI will appear, allowing you to configure \nPyneal\n to the current experiment\n\n\n\n\n\n\n\n\nCommunication\n:\n\n\n\n\nPyneal-Scanner Port\n: The port number over which \nPyneal\n will be listening for incoming data from \nPyneal Scanner\n. Note that this number should match the port number specified in the \npynealSocketPort\n configuration field of the \nPyneal Scanner\n set up. \n\n\nResults Server Port\n: The port number that \nPyneal\n will use to set up the \nResults Server\n. Remote machines that wish to retrieve real-time analysis output during a scan can send requests over this port number. See Formatting Results Server Requests [TODO]\n\n\n\n\n\n\n\n\nMask\n: Path to mask file (Nifti - .nii/.nii.gz) to be used during real-time analysis. Each incoming 3D volume will be masked to remove non-relevant voxels. The mask will limit which voxels get passed on to the analysis stage. So, for example:\n\n\n\n\nTo calculate the \nAverage\n ROI activation at every timepoint, choose a mask file that represents the target ROI. \n\n\nFor a \nCustom\n analysis that uses the entire brain volume, choose a mask file that represents a whole brain mask. \n\n\nIn all cases, the mask \nmust\n match the dimensions and orientation of incoming functional volumes [see Creating Masks for Real-time Analysis TODO]. \n\n\nIf \nWeighted Mask?\n is checked, the voxel values will be used as weights during the analysis. \n\n\n\n\n\n\n\n\nPreprocessing\n: Set the number of timepoints for the current scan\n\n\n\n\n\n\nAnalysis\n: Real-time analysis options. The analysis you select will be computed at every timepoint throughout the scan.\n\n\n\n\nAverage\n: Compute the average activation at each timepoint across all voxels within the mask\n\n\nMedian\n: Compute the median activation at each timepoint across all voxels within the mask\n\n\nCustom\n: Choose a custom analysis script. This script will be executed at each new timepoint [see Setting up Custom Analysis Scripts TODO]\n\n\n\n\n\n\n\n\nOutput\n: \n\n\n\n\nChoose an output directory to store logs and results from the current scan.\n\n\nLaunch Dashboard\n: Check this box to launch an interactive dashboard that will allow you to monitor the status of the scan once it begins. \n\n\n\n\n\n\n\n\nBehind the scenes, all of the relevant \nPyneal\n configuration settings are stored as \nkey:value\n pairs in a file stored at \npyneal/src/setupConfig.yaml\n. (In fact, the GUI simply reads this file at launch to get the previous configuration options, and then overwrites this file with the current GUI options whenever you click \nsubmit\n).\n\n\npynealScannerPort: 5555\nresultsServerPort: 5556\nmaskFile: /path/to/mask/file.nii.gz\nmaskIsWeighted: false\nnumTimePts: 60\nanalysisChoice: Average\noutputPath: /path/to/store/output\nlaunchDashboard: true\n\n\n\n\nConfiguration Keys\n:\n\n\n\n\npynealScannerPort\n: Port number over which \nPyneal\n will be listening for incoming data\n\n\nresultsServerPort\n: Port number that \nPyneal\n will use to set up the \nResults Server\n\n\nmaskFile\n: Path to mask file (Nifti - .nii/.nii.gz) to be used during real-time analysis\n\n\nmaskIsWeighted\n: Voxel values in mask represent weights [true/false]\n\n\nnumTimePts\n: Number of timepoints in current scan\n\n\nanalysisChoice\n: Real-time analysis options [Average/Median/Path to custom analysis file]\n\n\noutputPath\n: Path to output directory where logs and results will be saved\n\n\nlaunchDashboard\n: Launch dashboard to monitor real-time scan [true/false]\n\n\n\n\nAt the top of the setup GUI you have the option to load a custom settings file. A custom settings should be a \n.yaml\n file with values for one or more of the configuration keys above. By loading a custom settings file, the GUI will be populated with whichever configure keys are included; any non-included keys will get their values from the \nsetupConfig.yaml\n file as normal. \n\n\nThe option allows users to create settings files on a per-project basis, and easily configure \nPyneal\n to match the project demands.",
            "title": "Setup"
        },
        {
            "location": "/setup/#pyneal-scanner",
            "text": "Copy the  pyneal_scanner  directory to the  scanner computer .   Launch  Pyneal Scanner  from the command line by navigating in to the  pyneal_scanner  directory and running  pynealScanner.py   cd pyneal_scanner \npython pynealScanner.py   Pyneal Scanner  uses a set of configuration parameters that you can modify to fit your environment. These are stored in file named  scannerConfig.yaml  in the  pyneal_scanner  directory.   If you're running  Pyneal Scanner  for the first time, this file won't exist yet. You can either create this file manually, or wait until  pynealScanner.py  prompts you to fill in any missing configuration values from the command line. Any values you enter from the command line will be saved in a new  scannerConfig.yaml  file.   The  scannerConfig.yaml  file allows you to customize  Pyneal Scanner  to your scanning environment. The file contains just a few parameters stored as  key:value  pairs:  scannerBaseDir: /path/to/new/scans\nscannerMake: GE\npynealSocketHost: 127.0.0.1\npynealSocketPort: '9999'  Configuration Keys :    scannerBaseDir : The  fixed  portion of the directory path to where new reconstructed images will be appear during a scan. That is, the part that remains constant from scan to scan. Knowing what to set this value to can differ accroding to different scanner manufacturers:     GE : During a scan, new slices dicom files are written to a directory on the scanner console. The path to that directory can be broken apart like  [scannerBaseDir]/[sessionDir]/[seriesDir] , where   [scannerBaseDir] : path that remains constant across all scans  [sessionDir] : directories that can change from session to session, named like  p###/e###  where the specific  #  values are unknown in advance.  [seriesDir] : series specific directory named like  s###  where the specific  #  values are unknown in advance. Each new scan during a given exam session will be assigned a unique  s###  dir.    You only need to specify the path to the  scannerBaseDir  in the  scannerConfig.yaml  file;  Pyneal Scanner  will automaticaly find the most recently modified session and series directories and monitor for new series directories to appear. When you run  pynealScanner.py  you will see a printout in the terminal window about the names, sizes, and modification dates of all series directories in the session directory.    Siemens : TODO    Philips : Philips scanners have the option to export reconstructed PAR/REC files to a remote directory. The path to that directory can be broken apart like  [scannerBaseDir]/[seriesDir] , where   [scannerBaseDir] : path to remote directory that remains constant across all scans  [seriesDir] : series specific directory named like  ####     You only need to specify the path to the  scannerBaseDir  in the  scannerConfig.yaml  file;  Pyneal Scanner  will monitor for new series directories to appear.      scannerMake : Scanner Manufacturer, must be one of  GE ,  Siemens , or  Philips  (case sensitive)   pynealSocketHost : I.P. address of the  analysis computer  running  Pyneal .  pynealSocketPort : The port number over which  Pyneal  is listening for incoming data.",
            "title": "Pyneal Scanner"
        },
        {
            "location": "/setup/#pyneal",
            "text": "Launch  Pyneal  from the command line by navigating in to the  pyneal  directory and running  pyneal.py   cd pyneal  \npython pyneal.py   The  Pyneal  configuration is set via GUI. When you launch  pyneal.py  a GUI will appear, allowing you to configure  Pyneal  to the current experiment     Communication :   Pyneal-Scanner Port : The port number over which  Pyneal  will be listening for incoming data from  Pyneal Scanner . Note that this number should match the port number specified in the  pynealSocketPort  configuration field of the  Pyneal Scanner  set up.   Results Server Port : The port number that  Pyneal  will use to set up the  Results Server . Remote machines that wish to retrieve real-time analysis output during a scan can send requests over this port number. See Formatting Results Server Requests [TODO]     Mask : Path to mask file (Nifti - .nii/.nii.gz) to be used during real-time analysis. Each incoming 3D volume will be masked to remove non-relevant voxels. The mask will limit which voxels get passed on to the analysis stage. So, for example:   To calculate the  Average  ROI activation at every timepoint, choose a mask file that represents the target ROI.   For a  Custom  analysis that uses the entire brain volume, choose a mask file that represents a whole brain mask.   In all cases, the mask  must  match the dimensions and orientation of incoming functional volumes [see Creating Masks for Real-time Analysis TODO].   If  Weighted Mask?  is checked, the voxel values will be used as weights during the analysis.      Preprocessing : Set the number of timepoints for the current scan    Analysis : Real-time analysis options. The analysis you select will be computed at every timepoint throughout the scan.   Average : Compute the average activation at each timepoint across all voxels within the mask  Median : Compute the median activation at each timepoint across all voxels within the mask  Custom : Choose a custom analysis script. This script will be executed at each new timepoint [see Setting up Custom Analysis Scripts TODO]     Output :    Choose an output directory to store logs and results from the current scan.  Launch Dashboard : Check this box to launch an interactive dashboard that will allow you to monitor the status of the scan once it begins.      Behind the scenes, all of the relevant  Pyneal  configuration settings are stored as  key:value  pairs in a file stored at  pyneal/src/setupConfig.yaml . (In fact, the GUI simply reads this file at launch to get the previous configuration options, and then overwrites this file with the current GUI options whenever you click  submit ).  pynealScannerPort: 5555\nresultsServerPort: 5556\nmaskFile: /path/to/mask/file.nii.gz\nmaskIsWeighted: false\nnumTimePts: 60\nanalysisChoice: Average\noutputPath: /path/to/store/output\nlaunchDashboard: true  Configuration Keys :   pynealScannerPort : Port number over which  Pyneal  will be listening for incoming data  resultsServerPort : Port number that  Pyneal  will use to set up the  Results Server  maskFile : Path to mask file (Nifti - .nii/.nii.gz) to be used during real-time analysis  maskIsWeighted : Voxel values in mask represent weights [true/false]  numTimePts : Number of timepoints in current scan  analysisChoice : Real-time analysis options [Average/Median/Path to custom analysis file]  outputPath : Path to output directory where logs and results will be saved  launchDashboard : Launch dashboard to monitor real-time scan [true/false]   At the top of the setup GUI you have the option to load a custom settings file. A custom settings should be a  .yaml  file with values for one or more of the configuration keys above. By loading a custom settings file, the GUI will be populated with whichever configure keys are included; any non-included keys will get their values from the  setupConfig.yaml  file as normal.   The option allows users to create settings files on a per-project basis, and easily configure  Pyneal  to match the project demands.",
            "title": "Pyneal"
        },
        {
            "location": "/troubleshooting/",
            "text": "troubleshooting\n\u00b6\n\n\nTroubleshooting Heading 1\n\u00b6\n\n\nTroubleShooting Heading 2\n\u00b6",
            "title": "Troubleshooting"
        },
        {
            "location": "/troubleshooting/#troubleshooting",
            "text": "",
            "title": "troubleshooting"
        },
        {
            "location": "/troubleshooting/#troubleshooting-heading-1",
            "text": "",
            "title": "Troubleshooting Heading 1"
        },
        {
            "location": "/troubleshooting/#troubleshooting-heading-2",
            "text": "",
            "title": "TroubleShooting Heading 2"
        }
    ]
}